// Generated by gencpp from file tkdnn_ros/bbox.msg
// DO NOT EDIT!


#ifndef TKDNN_ROS_MESSAGE_BBOX_H
#define TKDNN_ROS_MESSAGE_BBOX_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace tkdnn_ros
{
template <class ContainerAllocator>
struct bbox_
{
  typedef bbox_<ContainerAllocator> Type;

  bbox_()
    : score(0.0)
    , x(0)
    , y(0)
    , width(0)
    , height(0)
    , id(0)
    , Class()  {
    }
  bbox_(const ContainerAllocator& _alloc)
    : score(0.0)
    , x(0)
    , y(0)
    , width(0)
    , height(0)
    , id(0)
    , Class(_alloc)  {
  (void)_alloc;
    }



   typedef double _score_type;
  _score_type score;

   typedef int64_t _x_type;
  _x_type x;

   typedef int64_t _y_type;
  _y_type y;

   typedef int64_t _width_type;
  _width_type width;

   typedef int64_t _height_type;
  _height_type height;

   typedef int16_t _id_type;
  _id_type id;

   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _Class_type;
  _Class_type Class;





  typedef boost::shared_ptr< ::tkdnn_ros::bbox_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::tkdnn_ros::bbox_<ContainerAllocator> const> ConstPtr;

}; // struct bbox_

typedef ::tkdnn_ros::bbox_<std::allocator<void> > bbox;

typedef boost::shared_ptr< ::tkdnn_ros::bbox > bboxPtr;
typedef boost::shared_ptr< ::tkdnn_ros::bbox const> bboxConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::tkdnn_ros::bbox_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::tkdnn_ros::bbox_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::tkdnn_ros::bbox_<ContainerAllocator1> & lhs, const ::tkdnn_ros::bbox_<ContainerAllocator2> & rhs)
{
  return lhs.score == rhs.score &&
    lhs.x == rhs.x &&
    lhs.y == rhs.y &&
    lhs.width == rhs.width &&
    lhs.height == rhs.height &&
    lhs.id == rhs.id &&
    lhs.Class == rhs.Class;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::tkdnn_ros::bbox_<ContainerAllocator1> & lhs, const ::tkdnn_ros::bbox_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace tkdnn_ros

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::tkdnn_ros::bbox_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::tkdnn_ros::bbox_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::tkdnn_ros::bbox_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::tkdnn_ros::bbox_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::tkdnn_ros::bbox_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::tkdnn_ros::bbox_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::tkdnn_ros::bbox_<ContainerAllocator> >
{
  static const char* value()
  {
    return "99f0004e8e0961c67afe8e6c495c79f6";
  }

  static const char* value(const ::tkdnn_ros::bbox_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x99f0004e8e0961c6ULL;
  static const uint64_t static_value2 = 0x7afe8e6c495c79f6ULL;
};

template<class ContainerAllocator>
struct DataType< ::tkdnn_ros::bbox_<ContainerAllocator> >
{
  static const char* value()
  {
    return "tkdnn_ros/bbox";
  }

  static const char* value(const ::tkdnn_ros::bbox_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::tkdnn_ros::bbox_<ContainerAllocator> >
{
  static const char* value()
  {
    return "float64 score\n"
"int64 x\n"
"int64 y\n"
"int64 width\n"
"int64 height\n"
"int16 id\n"
"string Class\n"
;
  }

  static const char* value(const ::tkdnn_ros::bbox_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::tkdnn_ros::bbox_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.score);
      stream.next(m.x);
      stream.next(m.y);
      stream.next(m.width);
      stream.next(m.height);
      stream.next(m.id);
      stream.next(m.Class);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct bbox_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::tkdnn_ros::bbox_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::tkdnn_ros::bbox_<ContainerAllocator>& v)
  {
    s << indent << "score: ";
    Printer<double>::stream(s, indent + "  ", v.score);
    s << indent << "x: ";
    Printer<int64_t>::stream(s, indent + "  ", v.x);
    s << indent << "y: ";
    Printer<int64_t>::stream(s, indent + "  ", v.y);
    s << indent << "width: ";
    Printer<int64_t>::stream(s, indent + "  ", v.width);
    s << indent << "height: ";
    Printer<int64_t>::stream(s, indent + "  ", v.height);
    s << indent << "id: ";
    Printer<int16_t>::stream(s, indent + "  ", v.id);
    s << indent << "Class: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.Class);
  }
};

} // namespace message_operations
} // namespace ros

#endif // TKDNN_ROS_MESSAGE_BBOX_H
